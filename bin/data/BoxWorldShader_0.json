{"boxworldShader":{"mainProgram":{"code":{"fragmentCode":{"frag":"#version 400\nlayout(location = 0) out vec4 glFragColor;\nin vec4 glFragCoord; // custom version of gl_FragCoord, used for tiled rendering.\n#define SYNTHCLIPSE_ONLY\nuniform vec3 iResolution;           // viewport resolution (in pixels)\nuniform float iGlobalTime;           // shader playback time (in seconds)\nuniform float iChannelTime[4];       // channel playback time (in seconds)\nuniform vec3 iChannelResolution[4]; // channel resolution (in pixels)\nuniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click\nuniform vec4 iDate;                 // (year, month, day, time in seconds)\nuniform float Jitter; //! slider[0,0.5,2]\nuniform sampler2D iChannel0; \t\t\t//! texture[\"Shadertoy/res/tex16.png\"]\nuniform bool Julia; //! checkbox[false]\nuniform vec3 ColorRGB; //! color[0.393, 0.871, 0.114]\nuniform vec4 ColorRGBA; //! color[0.255, 0.506, 0.91, 0.27]\nuniform int Shape; //! combobox[4, \"Cone\", \"Sphere\", \"Torus\", \"Box\", \"Teapot\"]\nuniform vec2 Direction2; //! direction[(1.0, 0.0)]\nuniform vec3 Direction3; //! direction[(1.0, 0.0, 0.0)]\nuniform vec3 RotationVec; //! rotation[45, 10, 200, input: degrees]\nuniform mat4 RotationMat4; //! rotation[45, 10, 200, input: degrees]\nuniform uint UintSlider; //! slider[0, 1, 7]\nuniform sampler2D Tex; //! texture[\"debug1.png\", mipmap: false, wrap_s: GL_CLAMP_TO_EDGE, wrap_t: GL_REPEAT, filter: GL_NEAREST]\nuniform samplerCube CubemapTex; //! texture[\"Shadertoy/res/cube04_0.png\"]\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// TODO: Add your code here.\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 ref_color = texture(iChannel0, uv);\n\tfloat add_color;\n\tif(Julia) {\n\t\tadd_color = ref_color.r;\n\t}else {\n\t\tadd_color = ref_color.g;\n\t}\n\tif(Shape == 4) {\n\t\tadd_color = ref_color.b;\n\t}\n\tfragColor = ColorRGBA*RotationMat4 + vec4(uv*Direction2, add_color + 0.5 + 0.5 * sin(iGlobalTime) * Jitter + ColorRGB.r, 1.0);\n}\n\nvoid main() {\n\tvec4 color;\n\tmainImage(color, glFragCoord.xy);\n\n\tcolor.w = 1.0;\n\tglFragColor = color;\n}\n\n//! <preset file=\"test.preset\" />\n\n\n","presetList":[{"rawTextValue":"0.87","name":"Jitter"},{"rawTextValue":"Shadertoy/res/tex16.png","name":"iChannel0"},{"rawTextValue":"false","name":"Julia"},{"rawTextValue":"0.393, 0.871, 0.114","name":"ColorRGB"},{"rawTextValue":"0.255, 0.506, 0.91, 0.27","name":"ColorRGBA"},{"rawTextValue":"4","name":"Shape"},{"rawTextValue":"1.0, 0.0","name":"Direction2"},{"rawTextValue":"1.0, 0.0, 0.0","name":"Direction3"},{"rawTextValue":"0.7853982, 0.17453285, -2.7925267","name":"RotationVec"},{"rawTextValue":"0.7853982, 0.17453292, 3.4906585","name":"RotationMat4"},{"rawTextValue":"1","name":"UintSlider"},{"rawTextValue":"debug1.png","name":"Tex"},{"rawTextValue":"Shadertoy/res/cube04_0.png","name":"CubemapTex"}],"fragUniformControlList":[{"name":"Jitter","typeString":"float","value":0.5},{"name":"iChannel0","typeString":"sampler2D","value":"Shadertoy/res/tex16.png"},{"name":"Julia","typeString":"bool","value":false},{"name":"ColorRGB","typeString":"vec3","value":"[0.393, 0.871, 0.114]"},{"name":"ColorRGBA","typeString":"vec4","value":"[0.255, 0.506, 0.91, 0.27]"},{"name":"Shape","typeString":"int","value":4},{"name":"Direction2","typeString":"vec2","value":"(1.0, 0.0)"},{"name":"Direction3","typeString":"vec3","value":"(1.0, 0.0, 0.0)"},{"name":"RotationVec","typeString":"vec3","value":"(0.7853982, 0.17453292, 3.4906585)"},{"name":"RotationMat4","typeString":"mat4","value":"(0.7853982, 0.17453292, 3.4906585)"},{"name":"UintSlider","typeString":"uint","value":1},{"name":"Tex","typeString":"sampler2D","value":"debug1.png","texParamList":[{"value":33071,"key":10242},{"value":10497,"key":10243},{"value":9728,"key":10241},{"value":9728,"key":10240}]},{"name":"CubemapTex","typeString":"samplerCube","value":"Shadertoy/res/cube04_0.png"}]},"vertexCode":{"vert":"#version 400\n#define SYNTHCLIPSE_ONLY\nlayout(location = 0) in vec3 VertexPosition;\n\n// Matrix used for tiled rendering:\nuniform mat4 TileMatrix = mat4(1.0);\nuniform vec2 resolution;\n\n// custom version of gl_FragCoord, used for tiled rendering.\nout vec4 glFragCoord;\n\nvoid main() {\n\tvec2 v = VertexPosition.xy;\n\tv.x = v.x * TileMatrix[0][0] + TileMatrix[3][0];\n\tv.y = v.y * TileMatrix[1][1] + TileMatrix[3][1];\n\tv = v * 0.5 + 0.5;\n\tglFragCoord.xy = v * resolution;\n\n\tgl_Position = vec4(VertexPosition, 1.0);\n}\n\n\n"}},"name":"test.stoy"}}}